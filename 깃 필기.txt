깃 : GIT 을 이용한 버전 관리 
깃이란 ? (분산) 버전 관리 프로그램 
버전 : 컴퓨터 소프트웨어 특정 상태
관리 : 어떤 일의 사무 , 시설이나 물건의 유지 개량
프로그램 : 컴퓨터에서 실행될 때 특정 작업을 수행하는 일련의 프로그램

버전 관리 : 컴퓨터 소프트웨어의 특정 상태들을 관리하는 것?

우리는 이미 버전 관리를 알고 있다!
레포트_최종.docx
레포트_진짜최종.docx 
-> 1년후 어떤게 진짜로 최종이지??? 파일에 날짜와 시간 적는다
마케팅관리_레포트_211204_0921.docx

만약 레포트 1개당 1000장이라면? 변경사항 기록하는 파일을 만든다.

마케팅관리_변경사항_211204_0921.docx
1개당 10억장이면?

맨 나중 파일과 , 이전 변경 사항만 남겨 
그러면 마케팅관리_변경사항_xxxx 파일만 남긴다.
최종버전과 변경사항을 거슬러 올라가면 됨 

버전은 
ver이 추가되면서 뼈대가 추가된다.

버전 관리 프로그램 - git 
변경사항들을 깃이라는 친구가 해준다.
변경사항의 육하원칙을 적어준다.  그중 왜는 커밋메시지로 기록하는것들의 이유를 적어줌
레포트와 변경사항들만 남긴 로그 형태를 남겨줌

깃의 목표 - 백업 , 복구 , 협업 

중앙집중식 버전은  : 중앙서버에 버전에대한 데이터가 있고 중앙서버에서 파일을 받음

분산버전 관리 : 모든 버전들이 버전에 대한 데이터들이 모든 컴퓨터에 있다.
사용자는 모든버전에 데이터를 가지고 있고 서버도 마찬가지이다.

중앙집중식 버전은 불이나면 중앙데이터가 모두 손실됨 각각의 컴퓨터가 백업이 안되어있어서 복구하기가 힘들다 

분산버전관리는 불이났다고 해도 각각 사용자 컴퓨터에는 파일에 대한 버전 데이터베이스들이 다 존재한다. 언제든지 복구를 할수있다. 컴퓨터에 있는 버전을 올리면 되서 좀더 관리가 용이하다

서버에 올리고 하기때문에 협업하기에 더 좋다

즉 , 깃은 최종파일과분산버전관리로 한다.
 
깃허브로 -  열정, 성실함, 홍보 능력
 
커밋- 변경사항들에 대한 기록

깃허브는 개발자들이 인스타그램을 제출하는 것처럼 이렇게 작업을 하고 코딩을 하고 이런 이력들을 가지고 있음을 나타낼수있는 하나의 공간 

기업에서 깃허브주소를 원할수 있다.

우리는 깃허브에서 협업 할 것이다.

프로젝트에서 git으로 버전관리 한것을 다른분들이 볼수있다. 
하나의 레포지토리를 협업할수있고 
내가 올린 버전을 다른사람이 받을 수 있다.

	SverComputer
	   깃허브

각각의 컴퓨터는 깃  

버전을 깃허브에 올리고 다른사람이 받아서 사용할수있다
올리고 내리고 해서 협업할 수 있다.

깃허브를 가장 많이 사용한다. 

programmerpark94@gmail.com 로 사용할것임
parkpeom94@gmail.com 본계정

깃배쉬를 설치하는 이유
git bash를 설치하여, 우리가 사용하는 운영체제인 window 운영체제(OS)환경에서도 리눅스 커맨드를 사용할 수 있게 된다.

나랑 컴퓨터가 만나는 접전 : 인터페이스

식당주방  | 키오스크 | 고객 
	     <- 
computer	    user
유저가 컴퓨터한테 어떤명령을 내리는거랑 같다

윈도우에서 그래픽유저인터페이스 = GUI 가 나옴 
유저가 컴퓨터한테 명령을 내리는것 어떤식으로 하느냐에 따라 

CLI : command Line Interface 커맨드에 명령어로 내린다.        
GUI : 그래픽 유저 인터페이스

굳이 GUI 가 있는데 CLI를 사용 ? 이유는 GUI에서 폴더를 만들려면 4단계
CLI는 mkdir test2 라고 치면 한번에 폴더가 생성됨 CLI는 한줄이면 만들어짐 

윈도우의 cmd는 왜안쓰나 ? 맥이랑 윈도우랑 통일하기 위해서 깃배쉬를 씀 

계정의 홈폴더
C:\Users\fight 여기에서 gitBash 로 연다
~ : 현재 로그인된 사용자 계정
~ 은 c/user/계정 
~ 의 경로는 오픈되어 있다. 
/ : 루트 디렉토리 -> c드라이브 최상위 폴더 위치를 의미한다. 

 $ pwd : /c/Users/fight 절대경로를 나타내기 좋다 

절대경로 : 주소의 절대적인 위치 
상대경로 : 포스코 사거리에 있더라 

$ cd .. 상위폴더로 올라감 change directory  상대경로로 이동 

. : 현재 디렉토리를 의미
.. : 현재 위치에 상위 폴더로 이동 ~

cd ~ : 홈폴더로 이동한다. 


1. 파일생성
$ touch a.txt

2. 폴더생성 
$ mkdir test

3. 폴더 내 파일 목록
$ ls   list segment 

ctrl + l : 스크롤 올리기 \
clrear : 아예 지우기 

숨김 파일도 보여주는 옵션 
$ ls -a -> .git 를 보고싶을때 

4. 이름 변경 / 위치 이동
mv a.txt test/ - 폴더로 이동 
mv a.txt b.txt - 이름변경  
5. 경로 변경 
cd test 

6. 삭제
rm -> 바로 삭제됨 휴지통에 안감 

7. 홈폴더로 이동 cd 

rm -r test/ : 그냥 삭제된거 확인 

8. 내가 있는 위치로 폴더 열어줌
$start . 

- 문제
git bash
1. 홈폴더에서 시작 cd 
2. test 라는 폴더 만들기 mkdir 
3. test 폴더에 이동하기 (경로 이동) cd test
4. test 폴더 하단에 a.txt 파일 만들기  touch
5. 파일 만든 후 , b.txt 로 이름 바꾸기  mv 
6. 상대경로를 활용해서 홈폴더로 경로 이동하기 cd ..
7. 현재 경로 출력하기 pwd

비쥬얼스튜디오 , 타입포라 설치

비쥬얼스튜디오 에서 ctrl + 빽키 

폴더트리 , 파일편집 , 터미널 영역으로 나누어짐 

> powershell 이면 + v 에서 기본프로필 편집에서 git bash 선택 

뉴스홈페이지 - > 마크업언어로 만들어진 HTML 
마크다운 을 알려면 마크업에 대해서 알아야 한다.

경량화 된 게 마크다운
마크업 -> HTML

<h1>	</h1>
<dir>
	</div>
복잡하다 문장 태그로써 묶어줘야 하므로 
좀더 쉽게 하자는게 마크다운 
우리는 마크다운을 배우게되는데

마크다운이란? 깃허브에서 사용하기 때문이다.

README.md -> .md 마크다운을 의미한다. 
내 프로젝트는 어떤 프로젝트이고 어떤구조로 이루어져 있다 라는 식으로
모든 HTML문법을 나타내지는 못함 

타입포라 - 마크다운 문법을 사용하면 좀더 간결하고 가볍게 구조화된 문서를 만들수 있다.

# 제목 
사이즈 키우고 싶다고 크게 키우면 안됨 무조건 제목에만 # 
역할에 맞춰 , 문법을 사용해야 한다!  

# 6개까지 내려갈수있다 

원래 문법 보기 : ctrl + / 

깃을 만든  창시자 : 리누스토발즈
2주만에 깃을 만드심

 버전관리를 할것이라는 명령어 
$ git init  : 내가 있는경로에 모든 파일이 버전관리 대상이 된다.
home 폴더에서 git init 하면 너무 무거워 진다.
프로젝트 단위단위마다 get init 실행한다.

.git 이라는 git 레포지터리가 생성됨 
.git 은 숨긴폴더인데 ls 를 치면 안나옴 
ls -a 숨긴폴더까지 다 공개 하면 .git 이 나온다.


분장실 -> 무대 -> 사진 촬영본
 working Directory -> Staging Area(준비) -> Commits
 

U : Untracked 상태 ->  git add README.md 로 무대로 올림
->  U->A 로 바뀜 추가가됬따는걸 확인 -> git commit -m 'first commit'

커밋 기록하기 전에 내가 누구인지 깃한테 정보를 줘야 한다 
git config --global user.email "you@example.com"
git config --global user.name "Your Name"

이메일은 깃허브에 가입한 이메일이다.

다시한번 커밋한다. 
git commit -m "first commit"
알아서 저장해줌 
$git log  이 커밋을 누가 썼고 언제 썼고 왜 썼는지 확인해준다. 


대기실 -> git add - > 무대 -> git commit -m '메시지' -> 버전하나 저장 

$git status - 버전을 다 기록하고 워킹 트리와 내가 저정한 버전이 일치했을때 

1. git 초기 설정
git config --global user.name "이름"
git config --global user.email "깃허브 이메일"

2. git 시작하기
git init
3. git 파일들의 상태 확인
git status 
빨간색 파일은 한번도 무대위로 올라간적이 없다 
 
4. 변경사항 내역 확인 
git log
--oneline 한줄로 보기 옵션 

5. 무대 위로 올리기 
git add 파일명 

6. 변경사항 기록하기
git commit -m "변경 사유"

 modified : 수정되었다 라는걸 알려준다. 
git add README.md

git status  - modified 수정된게 있다 알려줌 
git commit 
-m 옵션이 없으면 bean 이란게 나오는데 이것도 에디터 이긴 한데 
활용하는게 더 불편함 insert = i 치면 입력모드 
커밋 메시지를 적음 README.md 수정 
입력모드 에서 명령모드로 빠져나가야함 esc로 명령모드로 진입
:wq 주면서 저장하면서 종료 

반드시 -m 옵션을 쓰자 !!  

m옵션으로 변경사항을 적어준다 .
$git log --oneline  : 변경사항 옵션을 한줄 로 볼수 있다.
노란색은 각각의 커밋들이 가지고 있는 해쉬코드(고유한주소)

$git log --oneline 
$git checkout 해쉬코드값 

로그인 상태에서 커밋 로그인상태를 확인할수있다.
$git checkout master  마스터로 돌아옴 


모두 무대위로 올리기 git add . 

기록 - 커밋 


저장하고 
status 에서
midified 이면 git add 해줘야함 
git add 하고 나서 무대에 올린후 커밋해서 사진찍는다 
 

해쉬값으로 돌아가서 이동해줘 라고 한다면 
되돌릴수있다.
 
처음부터 git checkout main 

로컬에 있는 원격저장소에도 레퍼지토리(저장소) 방이 필요하다 

원격저장소 방을 빌린것이다.
로컬저장소랑 연결 한다.

local 3개의 공간 
WD .  SA  .  COMMITS     
     ->     ->   -v1,-v2,-v3
     add  commit

remote 원격저장소와 local 연결함 
커밋들이 쌓여있긴한데 내컴퓨터에만 있다. 깃허브 상황에 올리려면 길이 필요
길을 만들기 위해서는 깃한테 명령을해준다
git remote -v 길 
git remote add 이 로컬과 연결하는 원격저장소를 추가한다. 이름은  origin 이라고 부를것이고 이 친구의 주소를 줌 

그러면 레퍼지토리랑 연결됨

local 에있는걸 remote 로 올려달라는 git push 명령어

git push 원격저장소이름 브렌치이름 

(로컬저장소와 리모트 연결)
git remote add origin(원격저장소이름) URL
git remote -v  깃버전

local 에서 remote 로 변경 사항 올리기
git push origin(원격저장소이름) master(default 브렌치)

git config --global user.email "you@example.com"
git config --global user.name "Your Name"

깃 정보 삭제 
git remote rm origin(원격저장소이름)




				
